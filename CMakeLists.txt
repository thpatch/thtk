cmake_minimum_required(VERSION 3.0)
set(CMP0048 NEW)

project("Touhou Toolkit"
  VERSION 12)
set(PROJECT_URL "https://github.com/thpatch/thtk")
set(PROJECT_BUGREPORT "https://github.com/thpatch/thtk/issues")

include(cmake/CheckStructPacking.cmake)
include(CheckTypeSize)
include(CheckIncludeFile)
include(CheckSymbolExists)
include(CMakePushCheckState)

check_packing_gnuc_attribute()
if(NOT ${HAVE_PACKING_GNUC_ATTRIBUTE})
    check_packing_pragma_push()
    if(NOT ${HAVE_PACKING_PRAGMA_PUSH})
        message(SEND_ERROR "No structure packing.")
    endif()
endif()

check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
if(${HAVE_SYS_TYPES_H})
  set(CMAKE_EXTRA_INCLUDE_FILES "sys/types.h")
  check_type_size(off_t OFF_T BUILTIN_TYPES_ONLY)
  check_type_size(ssize_t SSIZE_T BUILTIN_TYPES_ONLY)
  cmake_reset_check_state()
endif()
if(NOT ${HAVE_SSIZE_T})
  cmake_reset_check_state()
  set(CMAKE_EXTRA_INCLUDE_FILES "basetsd.h")
  check_type_size(SSIZE_T SSIZE_T_BASETSD BUILTIN_TYPES_ONLY)
  cmake_reset_check_state()
endif()
cmake_pop_check_state()

check_include_file("stdint.h" HAVE_STDINT_H)
check_include_file("unistd.h" HAVE_UNISTD_H)

check_symbol_exists("mmap" "sys/mman.h" HAVE_MMAP)
check_symbol_exists("scandir" "dirent.h" HAVE_SCANDIR)
check_symbol_exists("fstat" "sys/stat.h" HAVE_FSTAT)
check_symbol_exists("fileno" "stdio.h" HAVE_FILENO)

set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

option(WITH_LIBPNG_SOURCE "Compile libpng from source" ON)
if(UNIX)
  option(CONTRIB_UTHDAT "Build midnight commander plugin" OFF)
endif()
if(WIN32)
  option(CONTRIB_WCTHDAT "Build total commander plugin" OFF)
endif()

if(MSVC)
  # Defining these here rather than in config.h.in also applies them to the
  # zlib-ng and libpng build.
  # Character set options were introduced in Visual Studio 2015 Update 2
  add_compile_options(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE /source-charset:utf-8 /execution-charset:utf-8)
else()
  add_compile_options(-D_GNU_SOURCE -std=c99 -finput-charset=utf-8 -fexec-charset=utf-8)
endif()

function(link_setargv target)
  if(MSVC)
    set_target_properties(${target} PROPERTIES LINK_FLAGS "setargv.obj")
  endif()
endfunction()

if(MSVC)
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT /GL /Ox /Ot")
  set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /INCREMENTAL:NO /OPT:REF /LTCG")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /INCREMENTAL:NO /OPT:REF /LTCG")
  set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /MT /GL /Ox /Ot")
  set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} /INCREMENTAL:NO /OPT:REF /LTCG")
  set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /INCREMENTAL:NO /OPT:REF /LTCG")
  set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
endif()

if(MSVC)
  set(THTK_WARNING_FLAGS /W3 /wd4267 /wd4244)
else()
  set(THTK_WARNING_FLAGS -Wall -Wextra -Wno-parentheses $<$<C_COMPILER_ID:Clang>:-Wno-pragma-pack> -Wno-sign-compare)
endif()

set(BISON_FLAGS "" CACHE STRING "Flags used by the BISON parser generator during all build types.")

include_directories(${CMAKE_CURRENT_BINARY_DIR})
add_subdirectory(extlib)
add_subdirectory(util)
include_directories(util extlib/thtypes)
add_subdirectory(thanm)
add_subdirectory(thdat)
add_subdirectory(thecl)
add_subdirectory(thmsg)
add_subdirectory(thstd)
add_subdirectory(thtk)
add_subdirectory(contrib)

configure_file(config.h.in config.h)
